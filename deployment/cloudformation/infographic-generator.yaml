AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Infographic Generator - Infrastructure as Code template for AWS Strands system'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: aws-infographic-generator
    Description: Project name for resource naming
  
  S3BucketName:
    Type: String
    Default: aws-infographic-generator-assets
    Description: S3 bucket name for storing generated infographics

Resources:
  # S3 Bucket for storing generated infographics and assets
  InfographicAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3BucketName}-${Environment}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # S3 Bucket Policy for public read access to generated infographics
  InfographicAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InfographicAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${InfographicAssetsBucket}/*"

  # IAM Role for Lambda execution
  InfographicLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-execution-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "${InfographicAssetsBucket}/*"
                  - !Ref InfographicAssetsBucket
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  # IAM Role for ECS Task execution
  InfographicECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ecs-task-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "${InfographicAssetsBucket}/*"
                  - !Ref InfographicAssetsBucket

  # ECS Task Execution Role
  InfographicECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ecs-execution-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # CloudWatch Log Group for application logs
  InfographicLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/infographic-generator/${Environment}"
      RetentionInDays: 14

  # Lambda function for serverless infographic generation
  InfographicLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-generator-${Environment}"
      Runtime: python3.11
      Handler: lambda_handler.handler
      Role: !GetAtt InfographicLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Infographic generator placeholder - deploy actual code')
              }
      Timeout: 900  # 15 minutes
      MemorySize: 3008  # Maximum memory for image processing
      Environment:
        Variables:
          S3_BUCKET: !Ref InfographicAssetsBucket
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket for infographic assets
    Value: !Ref InfographicAssetsBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"
  
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt InfographicLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaArn"
  
  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt InfographicLambdaExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaRole"
  
  ECSTaskRoleArn:
    Description: ARN of the ECS task role
    Value: !GetAtt InfographicECSTaskRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskRole"
  
  ECSExecutionRoleArn:
    Description: ARN of the ECS execution role
    Value: !GetAtt InfographicECSExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSExecutionRole"
  
  LogGroupName:
    Description: Name of the CloudWatch log group
    Value: !Ref InfographicLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup"